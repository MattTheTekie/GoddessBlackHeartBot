#              Send DMs to people using bots (Python)
import discord
import base64
import binascii
import hashlib
import ast
import io
import random
import time
import json
import sys
import inspect
import os
import asyncio
import asyncpg
import logging
import aiohttp
import traceback
import requests
import subprocess
import textwrap
from discord.ext.commands.cooldowns import BucketType
from discord.ext.commands import Bot, Greedy
from discord.ext.tasks import loop
from discord import User
from asyncio import sleep
from discord.ext import commands
from datetime import datetime
from os import listdir
from os.path import isfile, join
from contextlib import redirect_stdout
import math
import re
import lavalink
import ldap

logger = logging.getLogger('discord')
logger.setLevel(logging.INFO)
handler = logging.FileHandler(filename='discord.log', encoding='utf-8', mode='w')
handler.setFormatter(logging.Formatter('%(asctime)s:%(levelname)s:%(name)s: %(message)s'))
logger.addHandler(handler)

# This is prefix of my bot
bot = Bot(command_prefix='!')

bot.launch_time = datetime.utcnow()
bot.version_code = "Release 1.2 Beta"

# Lets send A DM
@bot.command()
async def pm(ctx, users: Greedy[User], *, message):
    for user in users:
        await user.send(message)


# About embed
@bot.command(aliases=['info'])
async def about(ctx):
    embed = discord.Embed(title="About 女神ブラックハート:", description="The Goddess Black Heart bot started out as  a random mad computer science experiment but evolved into a full scale bot!")
    embed.add_field(name="Author: ", value="<@318528448320634881>", inline=False)
    embed.add_field(name="Stats: ", value="Guilds: **{}**\nUnique Players: **{}**\n"
                    .format(len(bot.guilds),sum(1 for _ in bot.get_all_members())))
    embed.add_field(name="Version: ", value="女神ブラックハート: **{}**\nPython: **{}**\nDiscord.py: **{}**"
                    .format(bot.version_code, sys.version, discord.__version__))
    embed.add_field(name="Source Code", value="https://github.com/Austcool-Walker/GoddessBlackHeartBot.git")
    embed.add_field(name="Discord Server", value="https://discord.gg/veVDS47")
    embed.set_image(url="https://cdn.discordapp.com/icons/692758311585579088/203473cf00ee5cde6cf7a5c52614464b.webp")
    embed.add_field(name="Invite", value="[Invite link](https://discordapp.com/api/oauth2/authorize?client_id=693568262813909072&permissions=8&scope=bot)")
    embed.set_footer(icon_url=ctx.message.author.avatar_url,
                     text="Requested by {}".format(ctx.message.author.name))
    await ctx.send(embed=embed)



# Uptime bot command
@bot.command()
async def uptime(ctx):
    delta_uptime = datetime.utcnow() - bot.launch_time
    hours, remainder = divmod(int(delta_uptime.total_seconds()), 3600)
    minutes, seconds = divmod(remainder, 60)
    days, hours = divmod(hours, 24)
    await ctx.send("I have been up for "f"{days} days, {hours} hours, {minutes} minutes, and {seconds} seconds.")

@bot.command()
async def winner(ctx):
    try:
        user = ctx.message.mentions[0]
    except Exception:
        memberlist = ctx.message.guild.members
        user = memberlist[random.randint(0, len(memberlist))]
    await ctx.send("Congratulations, {}! You're a winner!".format(user.name))

@bot.command()
async def loser(ctx):
    try:
        user = ctx.message.mentions[0]
    except Exception:
        memberlist = ctx.message.guild.members
        user = memberlist[random.randint(0, len(memberlist))]
    await ctx.send("Sorry, {}! You're a loser!".format(user.name))

# Encryption commands from Albert Tangs Axiro.

@bot.command()
async def encode(ctx, target, *, message: str):
    if "base64".lower() in target:
        crypto = str(base64.b64encode(bytes(message, 'utf-8')))
        crypto = crypto[2:-1]
    elif "binary".lower() in target:
        crypto = ' '.join(format(ord(x), 'b') for x in message)
    else:
        await ctx.send('That is not a valid target.')
        return
    embed = discord.Embed(title="Encryption complete.", color=discord.Colour.dark_blue(),
                          description="Here's your new message in {}".format(target))
    embed.add_field(name="Before: ", value="{}".format(message), inline=False)
    embed.add_field(name="After: ", value="{}".format(crypto), inline=False)
    embed.set_footer(icon_url=ctx.message.author.avatar_url,
                     text="Requested by {}".format(ctx.message.author.name))
    await ctx.send(embed=embed)

@bot.command()
async def hash(ctx, target, *, message: str):
    if "md5".lower() in target:
        hash = hashlib.md5(message.encode('utf-8')).hexdigest()
    elif "sha1".lower() in target:
        hash = hashlib.sha1(message.encode('utf-8')).hexdigest()
    elif "sha224".lower() in target:
        hash = hashlib.sha224(message.encode('utf-8')).hexdigest()
    elif "sha256".lower() in target:
        hash = hashlib.sha256(message.encode('utf-8')).hexdigest()
    elif "sha384".lower() in target:
        hash = hashlib.sha384(message.encode('utf-8')).hexdigest()
    elif "sha512".lower() in target:
        hash = hashlib.sha512(message.encode('utf-8')).hexdigest()
    else:
        await ctx.send('That is not a valid target.')
        return
    embed = discord.Embed(title="Hash complete.", color=discord.Colour.dark_blue(),
                          description="Here's your new message in {}".format(target))
    embed.add_field(name="Before: ", value="{}".format(message), inline=False)
    embed.add_field(name="After: ", value="{}".format(hash), inline=False)
    embed.set_footer(icon_url=ctx.message.author.avatar_url,
                     text="Requested by {}".format(ctx.message.author.name))
    await ctx.send(embed=embed)

@bot.command()
async def decode(ctx, target, *, message: str):
    if "base64".lower() in target:
        decoded = str(base64.b64decode(bytes(message, 'utf-8')))
        decoded = decoded[2:-1]
    elif "binary".lower() in target:
        """This currently does not work."""
        # decoded = ''.join(chr(int(message[i*8:i*8+8],2)) for i in range(len(message)//8))
        #decoded = binascii.b2a_qp(message)
        #await ctx.send(decoded)
        await ctx.send("Binary decryption is currently not ready.")
        return
    else:
        await ctx.send('That is not a valid target.')
        return
    embed = discord.Embed(title="Decryption complete.", color=discord.Colour.dark_red(),
                          description="Here's your new message from {}".format(target))
    embed.add_field(name="Before: ", value="{}".format(message), inline=False)
    embed.add_field(name="After: ", value="{}".format(decoded), inline=False)
    embed.set_footer(icon_url=ctx.message.author.avatar_url,
                     text="Requested by {}".format(ctx.message.author.name))
    await ctx.send(embed=embed)

@bot.command()
async def encipher(ctx, target, *, message: str):
    if "caesar".lower() in target:
        L2I = dict(zip("ABCDEFGHIJKLMNOPQRSTUVWXYZ", range(26)))
        I2L = dict(zip(range(26), "ABCDEFGHIJKLMNOPQRSTUVWXYZ"))
        key = 3
        ciphertext = ""
        for c in message.upper():
            if c.isalpha():
                ciphertext += I2L[(L2I[c] + key) % 26]
            else:
                ciphertext += c
        await ctx.send(ciphertext)
    else:
        await ctx.send('That\'s not a valid cipher option.')

@bot.command()
async def decipher(ctx, target, *, message: str):
    if "caesar".lower() in target:
        L2I = dict(zip("ABCDEFGHIJKLMNOPQRSTUVWXYZ", range(26)))
        I2L = dict(zip(range(26), "ABCDEFGHIJKLMNOPQRSTUVWXYZ"))
        key = 3
        plaintext = ""
        for c in message.upper():
            if c.isalpha():
                plaintext += I2L[(L2I[c] - key) % 26]
            else:
                plaintext += c
        await ctx.send(plaintext)
    else:
        await ctx.send('That\'s not a valid cipher option.')

@bot.command()
async def reverse(ctx, *, message: str):
    new_msg = message[::-1]
    await ctx.send(new_msg)

# More bot commands from Axiro's General module.
@bot.command()
async def user(ctx):
    try:
        target = ctx.message.mentions[0]
    except Exception:
        target = ctx.message.author
        await ctx.send("User not found or specified. Collecting information about sender...")
    roles = []
    for x in target.roles:
        roles.append(x.name)
    knownroles = "\n".join(roles)
    embed = discord.Embed(title="Information successfully collected!", description="Here's what we know about {} "
                                "(also known as {})".format(target.name, target.display_name))
    embed.add_field(name="User ID: ", value=str(target.id), inline=False)
    embed.add_field(name="Current Roles: ", value=knownroles, inline=False)
    embed.add_field(name="Joined Discord on: ", value=target.created_at, inline=False)
    embed.set_thumbnail(url=target.avatar_url)
    embed.set_footer(icon_url=ctx.message.author.avatar_url, text="Requested by {}".format(ctx.message.author.name))
    await ctx.send(embed=embed)

@bot.command()
async def ping(ctx):
    t_1 = time.perf_counter()
    await ctx.trigger_typing()
    t_2 = time.perf_counter()
    time_delta = round((t_2 - t_1) * 1000)
    responses = ['Pong!', 'Ack!', 'Whoa!', 'Pang!', 'How am I doing?']
    await ctx.send("{} ``Time: {}ms``".format(random.choice(responses), time_delta))

# Bots Status
# Setting `Playing ` status
# !eval await bot.change_presence(status=discord.Status.online, activity=discord.Game(name="The Overcomplicated Weirdness 1.12.2"))

# Setting `Streaming ` status
# !eval await bot.change_presence(status=discord.Status.online, activity=discord.Streaming(name="Approaching Nirvana", url="https://www.twitch.tv/approachingnirvana"))

# Setting `Listening ` status
# !eval await bot.change_presence(status=discord.Status.idle, activity=discord.Activity(type=discord.ActivityType.listening, name="Reboot by Approaching Nirvana & Big Giant Circles"))

# Setting `Watching ` status
# !eval await bot.change_presence(status=discord.Status.dnd, activity=discord.Activity(type=discord.ActivityType.watching, name="Azur Lane"))

#@bot.command()
#async def (ctx):
#    await ctx.send("")

@bot.command()
async def bowtourqueen(ctx):
    embed = discord.Embed(color=discord.Colour.red(), title="Bow To Your New Queen!")
    embed.set_image(url="https://i.imgur.com/t2LE30K.png")
    await ctx.send(embed=embed)

@bot.command()
async def degen(ctx):
    embed = discord.Embed(color=discord.Colour.red(), title="You Are All Degnerates Now!")
    embed.set_image(url="https://media1.tenor.com/images/eade076432e4650c25ed82a6368d5ba4/tenor.gif?itemid=15576648")
    await ctx.send(embed=embed)

@bot.command()
async def finished(ctx):
    embed = discord.Embed(color=discord.Colour.red(), title="YOU'RE FINISHED!")
    embed.set_image(url="https://i.fiery.me/2KnBa.gif")
    await ctx.send(embed=embed)

bot.remove_command('help')

@bot.command()
async def help(ctx):
    embed = discord.Embed(title="DMbot-discord", description="A bot for sending Discord DMs to users. List of commands are:", color=0xff00e6)
    embed.add_field(name="!about", value="Gives information about this bot.", inline=False)
    embed.add_field(name="!pm", value="Sends user a message in a DM. The bot must share a server with the user you wish to send the message to.", inline=False)
    embed.add_field(name="!bowtourqueen", value="Sends a image of Goddess Black Heart from neptunia (meme)", inline=False)
    embed.add_field(name="!degen", value="Sends a image of Degenerates.", inline=False)
    embed.add_field(name="!lfinished", value="Sends a image of Black Heart Destroying you with Lace Ribbon Dance!", inline=False)
    embed.add_field(name="!user", value="Gives gives information about the targeted user.", inline=False)
    embed.add_field(name="!ping", value="Tests users speed. (ping)", inline=False)
    embed.add_field(name="!encode", value="Encodes sent text in targeted encoding (binary | base64).", inline=False)
    embed.add_field(name="!hash", value="Hashes the targeted text into a hash. (md5 | sha1sum | sha224sum | sha256sum | sha384sum | sha512sum)", inline=False)
    embed.add_field(name="!decode", value="Decodes sent text in targeted encoding. (binary | base64", inline=False)
    embed.add_field(name="!encipher", value="Enciphers text in the targeted cipher. (caesar)", inline=False)
    embed.add_field(name="!decipher", value="Deciphers text in the targeted cipher. (caesar)", inline=False)
    embed.add_field(name="!reverse", value="Reverses the targeted text.", inline=False)
    embed.add_field(name="!say", value="Says the targeted text.", inline=False)
    embed.add_field(name="!kick", value="Kicks the targeted user from the server.", inline=False)
    embed.add_field(name="!ban", value="Bans the targeted user from the server.", inline=False)
    embed.add_field(name="!mute", value="Mutes the targeted user in the server.", inline=False)
    embed.add_field(name="!unmute", value="Unmutes the targeted user in the server.", inline=False)
    embed.add_field(name="!prune", value="Prunes messages in the current channel. (number of messages to be pruned)", inline=False)
    embed.add_field(name="!nickname", value="Changes the current global nickname of the bot.", inline=False)
    embed.add_field(name="!servers", value="Lists the current servers the bot is in.", inline=False)
    embed.add_field(name="!setnickname", value="Changes the nickname of the targeted user.", inline=False)
    embed.add_field(name="!geninvite", value="Generates an invite for a guild if possible.", inline=False)
    embed.add_field(name="!test", value="Makes bot send Test to ensure its working correctly.", inline=False)
    embed.add_field(name="!echo", value="Outputs a message as a bot on a specific channel. Make sure the bot shares the targeted server if sending to channel of alternate server. (Channel_ID)", inline=False)
    embed.add_field(name="!discriminator", value="Returns users with the respective discriminator. (Discriminator_Number)", inline=False)
    embed.add_field(name="!avatar", value="Sends the targeted users avatar.", inline=False)
    embed.add_field(name="!help", value="Gives this help message", inline=False)
    embed.set_footer(icon_url=ctx.message.author.avatar_url,
                     text="Requested by {}".format(ctx.message.author.name))
    await ctx.send(embed=embed)

# Bots Status
# Setting `Playing ` status
# await bot.change_presence(activity=discord.Game(name="The Overcomplicated Weirdness 1.12.2"))

# Setting `Streaming ` status
# await bot.change_presence(activity=discord.Streaming(name="Approaching Nirvana", url="https://www.twitch.tv/approachingnirvana"))

# Setting `Listening ` status
# await bot.change_presence(activity=discord.Activity(type=discord.ActivityType.listening, name="Reboot by Approaching Nirvana & Big Giant Circles"))

# Setting `Watching ` status
# await bot.change_presence(activity=discord.Activity(type=discord.ActivityType.watching, name="Azur Lane"))

# Set bot's status
#async def status_task():
#    while True:
#        await bot.change_presence(status=discord.Status.online, activity=discord.Game("Waiting for !help"))
#        await asyncio.sleep(30)
#        await bot.change_presence(status=discord.Status.online, activity=discord.Game("Forgotten Insanity TOW [2.0.0] 1.12.2"))
#        await asyncio.sleep(30)
#        await bot.change_presence(status=discord.Status.online, activity=discord.Game("Hi I'm the DM bot."))
#        await asyncio.sleep(30)
#        await bot.change_presence(status=discord.Status.online, activity=discord.Game("I'm Austcool-Walker's first python3 project."))
#        await asyncio.sleep(30)
#        await bot.change_presence(activity=discord.Streaming(name="Approaching Nirvana", url="https://www.twitch.tv/approachingnirvana"))
#        await asyncio.sleep(30)
#        await bot.change_presence(activity=discord.Activity(type=discord.ActivityType.listening, name="Reboot by Approaching Nirvana & Big Giant Circles"))
#        await asyncio.sleep(30)
#        await bot.change_presence(activity=discord.Activity(type=discord.ActivityType.watching, name="Azur Lane"))
#        await asyncio.sleep(30)

#@bot.event
#async def on_ready():
#    ...
#    bot.loop.create_task(status_task())
    #count = requests.get(file="bot.status")

#Grab user Avatar bot command.
@bot.command()
async def avatar(ctx, *,  avamember : discord.Member=None):
    userAvatarUrl = avamember.avatar_url
    await ctx.send(userAvatarUrl)

# Debug code ripped from Albert Tangs Axiro

@bot.command()
async def say(ctx, *, message: str):
    await ctx.message.delete()
    await ctx.send(message)

# Moderation commands
@bot.command()
async def kick(ctx, user: discord.User, *, reason: str):
    if not ctx.message.channel.permissions_for(ctx.message.author.guild.me).kick_members:
        await ctx.send(":x: I do not have permission to kick players.")
        return
    try:
        await ctx.message.guild.kick(user, reason=reason)
    except Exception:
        await ctx.send(":x: Player kick failed.")
        return
    await ctx.send(":white_check_mark: Player {} has been kicked from the server.".format(user.name))

@bot.command()
async def ban(ctx, user: discord.User, *, reason: str):
    if not ctx.message.channel.permissions_for(ctx.message.author.guild.me).ban_members:
        await ctx.send(":x: I do not have permission to ban players.")
        return
    try:
        await ctx.message.guild.ban(user, reason=reason)
    except Exception:
        await ctx.send(":x: I completely failed to ban that player.")
        return
    await ctx.send(":white_check_mark: Player {} has been banned from the server.".format(user.name))

@bot.command()
async def mute(ctx, user: discord.Member):
    if not ctx.message.channel.permissions_for(ctx.message.author.guild.me).manage_roles:
        await ctx.send(":x: I do not have permission to manage roles.")
        return
    try:
        await ctx.message.channel.category.set_permissions(user, send_messages=False, add_reactions=False)
    except Exception:
        await ctx.send("I was unable to mute that player.")
        return
    await ctx.send(":white_check_mark: Player {} has been muted.".format(user.display_name))

@bot.command()
async def unmute(ctx, user: discord.Member):
    if not ctx.message.channel.permissions_for(ctx.message.author.guild.me).manage_roles:
        await ctx.send(":x: I do not have permission to manage roles.")
        return
    try:
        await ctx.message.channel.category.set_permissions(user, overwrite=None)
    except Exception:
        await ctx.send("I was unable to unmute that player.")
        return
    await ctx.send(":white_check_mark: Player {} has been unmuted.".format(user.display_name))

@bot.command()
async def prune(ctx, number: int):
    if not ctx.message.channel.permissions_for(ctx.message.author.guild.me).manage_messages:
        await ctx.send("I do not have permission to delete messages.")
        return
    if number > 500:
        await ctx.send("Please specify a lower number.")
        return
    to_delete = []
    async for message in ctx.message.channel.history(limit=number+1):
        to_delete.append(message)
    while to_delete:
        if len(to_delete) > 1:
            await ctx.message.channel.delete_messages(to_delete[:100])
            to_delete = to_delete[100:]
        else:
            await to_delete.delete()
            to_delete = []
        await asyncio.sleep(1.5)

# Eval bot command

def insert_returns(body):
    # insert return stmt if the last expression is a expression statement
    if isinstance(body[-1], ast.Expr):
        body[-1] = ast.Return(body[-1].value)
        ast.fix_missing_locations(body[-1])

    # for if statements, we insert returns into the body and the orelse
    if isinstance(body[-1], ast.If):
        insert_returns(body[-1].body)
        insert_returns(body[-1].orelse)

    # for with blocks, again we insert returns into the body
    if isinstance(body[-1], ast.With):
        insert_returns(body[-1].body)


@bot.command(aliases=['eval'])
async def eval_fn(ctx, *, cmd):
    """Evaluates input.

    Input is interpreted as newline seperated statements.
    If the last statement is an expression, that is the return value.

    Usable globals:
      - `bot`: the bot instance
      - `discord`: the discord module
      - `commands`: the discord.ext.commands module
      - `ctx`: the invokation context
      - `__import__`: the builtin `__import__` function

    Such that `>eval 1 + 1` gives `2` as the result.

    The following invokation will cause the bot to send the text '9'
    to the channel of invokation and return '3' as the result of evaluating

    >eval ```
    a = 1 + 2
    b = a * 2
    await ctx.send(a + b)
    a
    ```
    """
    fn_name = "_eval_expr"

    cmd = cmd.strip("` ")

    # add a layer of indentation
    cmd = "\n".join(f"    {i}" for i in cmd.splitlines())

    # wrap in async def body
    body = f"async def {fn_name}():\n{cmd}"

    parsed = ast.parse(body)
    body = parsed.body[0].body

    insert_returns(body)

    env = {
        'bot': ctx.bot,
        'discord': discord,
        'commands': commands,
        'ctx': ctx,
        '__import__': __import__
    }
    exec(compile(parsed, filename="<ast>", mode="exec"), env)

    result = (await eval(f"{fn_name}()", env))
    await ctx.message.add_reaction('👌')

# Admin bot commands

@bot.command(aliases=['quit'], hidden=True)
async def shutdown(ctx):
    '''Turn me off :( (BOT OWNER ONLY)'''
    await ctx.send('**:ok:** Bye!')
    #bot.gamesLoop.cancel()
    await bot.logout()
    sys.exit(0)

@bot.command(hidden=True)
async def restart(ctx):
    '''Restart me (BOT OWNER ONLY)'''
    await ctx.send('**:ok:** See you soon!')
    await bot.logout()
    sys.exit(6)

@bot.command(hidden=True)
async def botavatar(ctx, url: str):
    '''Set a new avatar (BOT OWNER ONLY)'''
    tempAvaFile = 'tempAva.png'
    async with aiohttp.get(''.join(url)) as img:
        with open(tempAvaFile, 'wb') as f:
            f.write(await img.read())
    f = discord.File(tempAvaFile)
    await bot.edit_profile(avatar=f.read())
    os.remove(tempAvaFile)
    asyncio.sleep(2)
    await ctx.send('**:ok:** My new avatar!\n %s' % bot.user.avatar_url)

@bot.command(hidden=True, aliases=['game'])
async def changegame(ctx, gameType: str, *, gameName: str):
    '''Changes the game currently playing (BOT OWNER ONLY)'''
    gameType = gameType.lower()
    if gameType == 'playing':
        type = discord.ActivityType.playing
    elif gameType == 'watching':
        type = discord.ActivityType.watching
    elif gameType == 'listening':
        type = discord.ActivityType.listening
    elif gameType == 'streaming':
        type = discord.ActivityTypes.streaming
    guildsCount = len(bot.guilds)
    memberCount = len(list(bot.get_all_members()))
    gameName = gameName.format(guilds = guildsCount, members = memberCount)
    await bot.change_presence(activity=discord.Activity(type=type, name=gameName))
    await ctx.send(f'**:ok:** Change the game: {gameType} **{gameName}**')

@bot.command(hidden=True)
async def changestatus(ctx, status: str):
    '''Changes bot online status (BOT OWNER ONLY)'''
    status = status.lower()
    if status == 'offline' or status == 'off' or status == 'invisible':
        discordStatus = discord.Status.invisible
    elif status == 'idle':
        discordStatus = discord.Status.idle
    elif status == 'dnd' or status == 'disturb':
        discordStatus = discord.Status.dnd
    else:
        discordStatus = discord.Status.online
    await bot.change_presence(status=discordStatus)
    await ctx.send(f'**:ok:** to another status: **{discordStatus}**')

@bot.command(hidden=True)
async def name(ctx, name: str):
    '''changes bot global name (BOT OWNER ONLY)'''
    await bot.edit_profile(username=name)
    msg = f':ok: change my name: **{name}**'
    await ctx.send(msg)

@bot.command(hidden=True, aliases=['guilds'])
async def servers(ctx):
    '''Lists the current connected guilds (BOT OWNER ONLY)'''
    msg = '```js\n'
    msg += '{!s:19s} | {!s:>5s} | {} | {}\n'.format('ID', 'Member', 'Name', 'Owner')
    for guild in bot.guilds:
        msg += '{!s:19s} | {!s:>5s}| {} | {}\n'.format(guild.id, guild.member_count, guild.name, guild.owner)
    msg += '```'
    await ctx.send(msg)

@bot.command(hidden=True)
async def leaveserver(ctx, guildid: str):
    '''Leaves a server (BOT OWNER ONLY)

    Example:
    -----------

    :leaveserver 102817255661772800
    '''
    if guildid == 'this':
        await ctx.guild.leave()
        return
    else:
        guild = bot.get_guild(guildid)
        if guild:
            await guild.leave()
            msg = f':ok: Exit from {guild.name} successful!'
        else:
            msg = ':x: Could not find a suitable guild for this ID!'
    await ctx.send(msg)

@bot.command(hidden=True)
async def echo(ctx, channel: str, *message: str):
    '''Outputs a message as a bot on a specific channel (BOT OWNER ONLY)'''
    ch = bot.get_channel(int(channel))
    msg = ' '.join(message)
    await ch.send(msg)
    await ctx.message.delete()

@bot.command(hidden=True)
async def discriminator(ctx, disc: str):
    '''Returns users with the respective discriminator'''

    discriminator = disc
    memberList = ''

    for guild in bot.guilds:
        for member in guild.members:
            if member.discriminator == discriminator and member.discriminator not in memberList:
                memberList += f'{member}\n'

    if memberList:
        await ctx.send(memberList)
    else:
        await ctx.send(":x: Couldn't find anyone")

@bot.command(hidden=True)
async def nickname(ctx, *name):
    '''?ndert den Server Nickname vom Bot (BOT OWNER ONLY)'''
    nickname = ' '.join(name)
    await ctx.me.edit(nick=nickname)
    if nickname:
        msg = f':ok: Change my server nickname: **{nickname}**'
    else:
        msg = f':ok: Reset from my server nickname: **{ctx.me.name}**'
    await ctx.send(msg)

@bot.command(hidden=True)
async def setnickname(ctx, member: discord.Member=None, *name):
    '''Changes a user's nickname (BOT OWNER ONLY)'''
    if member == None:
        member = ctx.author
    nickname = ' '.join(name)
    await member.edit(nick=nickname)
    if nickname:
        msg = f':ok: Change nickname of {member} to: **{nickname}**'
    else:
        msg = f':ok: Reset nickname for {member} on: **{member.name}**'
    await ctx.send(msg)

@bot.command(hidden=True)
async def geninvite(ctx, serverid: str):
    '''Generates an invite for a guild if possible (BOT OWNER ONLY)'''
    guild = bot.get_guild(int(serverid))
    invite = await bot.create_invite(guild, max_uses=1, unique=False)
    msg = f'Invite f?r **{guild.name}** ({guild.id})\n{invite.url}'
    await ctx.author.send(msg)

@bot.command(hidden=True, aliases=['wichteln'])
async def wichtel(ctx, *participants: str):
    '''Useful for the Community Wichtel Event 2018 (BOT OWNER ONLY)'''
    participantsList = list(participants)
    random.shuffle(participantsList)
    msg = 'Imp partners have been determined:\n```'
    for i, val in enumerate(participantsList):
        if i == len(participantsList) - 1:
            msg += f'{val.ljust(10)} ===> {participantsList[0]}\n'
        else:
            msg += f'{val.ljust(10)} ===> {participantsList[i + 1]}\n'

    msg += '```'
    await ctx.send(msg)

@bot.command(hidden=True)
async def test(ctx):
    '''Test Test Test'''
    await ctx.send('Test')
    await bot.AppInfo.owner.send('Test')
    await ctx.send(bot.cogs)

# Guild Logging

    async def on_guild_join(guild):
        if usedatabase:
            sql = "INSERT INTO guilds (id, name, prefix) VALUES ($1, $2, $3)"
            await db.execute(sql, guild.id, guild.name, config['prefix'])
        channel = get_channel(477206313139699722)
        embed = discord.Embed(title="Guild joined!", color=discord.Colour.blue(),
                              description="We have joined a guild, bringing us to {} guilds!".format(len(guilds)))
        embed.add_field(name="Guild name:", value=guild.name)
        embed.add_field(name="Guild Owner: ", value=guild.owner)
        embed.add_field(name="Member count: ", value=guild.member_count)
        embed.set_thumbnail(url=guild.icon_url)
        await channel.send(embed=embed)

    async def on_guild_remove(guild):
        if usedatabase:
            sql = "DELETE FROM guilds where id = $1"
            await db.execute(sql, guild.id)
        channel = get_channel(477206313139699722)
        embed = discord.Embed(title="Guild lost!", color=discord.Colour.red(),
                              description="We have lost a guild, dropping us to {} guilds!".format(len(guilds)))
        embed.add_field(name="Guild name:", value=guild.name)
        embed.add_field(name="Guild Owner: ", value=guild.owner)
        embed.add_field(name="Member count: ", value=guild.member_count)
        embed.set_thumbnail(url=guild.icon_url)
        await channel.send(embed=embed)

    async def prefixcall(bot, ctx):
        if ctx.guild is None:
            return config['prefix']
        if not usedatabase:
            return config['prefix']
        sql = "SELECT prefix FROM guilds WHERE id = $1"
        result = bot.db.fetchval(sql, ctx.guild.id)
        if result:
            return result
        else:
            return config['prefix']

#bot = Bot()


@bot.event
async def on_ready():
    lavalink.initialize(
        bot, host='127.0.0.1', password='youshallnotpass',
        rest_port=1983, ws_port=1984
    )

#@bot.command()
#async def play(voice_channel, search_terms):
#    player = await lavalink.connect(voice_channel)
#    tracks = await player.search_yt(search_terms)
#    player.add(tracks[0])
#    await player.play()

async def track_hook(event):
    if isinstance(event, lavalink.events.QueueEndEvent):
        guild_id = int(event.player.guild_id)
        await connect_to(guild_id, None)
        # Disconnect from the channel -- there's nothing else to play.

async def connect_to(guild_id: int, channel_id: str):
    """ Connects to the given voicechannel ID. A channel_id of `None` means disconnect. """
    ws = bot._connection._get_websocket(guild_id)
    await ws.voice_state(str(guild_id), channel_id)
    # The above looks dirty, we could alternatively use `bot.shards[shard_id].ws` but that assumes
    # the bot instance is an AutoShardedBot.

@bot.command(aliases=['p'])
async def play(ctx, *, query: str):
    """ Searches and plays a song from a given query. """
    player = bot.lavalink.players.get(ctx.guild.id)

    query = query.strip('<>')

    if not url_rx.match(query):
        query = f'ytsearch:{query}'

    results = await player.node.get_tracks(query)

    if not results or not results['tracks']:
        return await ctx.send('Nothing found!')

    embed = discord.Embed(color=discord.Color.blurple())

    if results['loadType'] == 'PLAYLIST_LOADED':
        tracks = results['tracks']

        for track in tracks:
            player.add(requester=ctx.author.id, track=track)

        embed.title = 'Playlist Enqueued!'
        embed.description = f'{results["playlistInfo"]["name"]} - {len(tracks)} tracks'
    else:
        track = results['tracks'][0]
        embed.title = 'Track Enqueued'
        embed.description = f'[{track["info"]["title"]}]({track["info"]["uri"]})'
        player.add(requester=ctx.author.id, track=track)

    await ctx.send(embed=embed)

    if not player.is_playing:
        await player.play()

@bot.command()
async def seek(ctx, *, seconds: int):
    """ Seeks to a given position in a track. """
    player = bot.lavalink.players.get(ctx.guild.id)

    track_time = player.position + (seconds * 1000)
    await player.seek(track_time)

    await ctx.send(f'Moved track to **{lavalink.utils.format_time(track_time)}**')

@bot.command(aliases=['forceskip'])
async def skip(ctx):
    """ Skips the current track. """
    player = bot.lavalink.players.get(ctx.guild.id)

    if not player.is_playing:
        return await ctx.send('Not playing.')

    await player.skip()
    await ctx.send('⏭ | Skipped.')

@bot.command()
async def stop(ctx):
    """ Stops the player and clears its queue. """
    player = bot.lavalink.players.get(ctx.guild.id)

    if not player.is_playing:
        return await ctx.send('Not playing.')

    player.queue.clear()
    await player.stop()
    await ctx.send('⏹ | Stopped.')

@bot.command(aliases=['np', 'n', 'playing'])
async def now(ctx):
    """ Shows some stats about the currently playing song. """
    player = bot.lavalink.players.get(ctx.guild.id)

    if not player.current:
        return await ctx.send('Nothing playing.')

    position = lavalink.utils.format_time(player.position)
    if player.current.stream:
        duration = '🔴 LIVE'
    else:
        duration = lavalink.utils.format_time(player.current.duration)
    song = f'**[{player.current.title}]({player.current.uri})**\n({position}/{duration})'

    embed = discord.Embed(color=discord.Color.blurple(),
                          title='Now Playing', description=song)
    await ctx.send(embed=embed)

@bot.command(aliases=['q'])
async def queue(ctx, page: int = 1):
    """ Shows the player's queue. """
    player = bot.lavalink.players.get(ctx.guild.id)

    if not player.queue:
        return await ctx.send('Nothing queued.')

    items_per_page = 10
    pages = math.ceil(len(player.queue) / items_per_page)

    start = (page - 1) * items_per_page
    end = start + items_per_page

    queue_list = ''
    for index, track in enumerate(player.queue[start:end], start=start):
        queue_list += f'`{index + 1}.` [**{track.title}**]({track.uri})\n'

    embed = discord.Embed(colour=discord.Color.blurple(),
                          description=f'**{len(player.queue)} tracks**\n\n{queue_list}')
    embed.set_footer(text=f'Viewing page {page}/{pages}')
    await ctx.send(embed=embed)

@bot.command(aliases=['resume'])
async def pause(ctx):
    """ Pauses/Resumes the current track. """
    player = bot.lavalink.players.get(ctx.guild.id)

    if not player.is_playing:
        return await ctx.send('Not playing.')

    if player.paused:
        await player.set_pause(False)
        await ctx.send('⏯ | Resumed')
    else:
        await player.set_pause(True)
        await ctx.send('⏯ | Paused')

@bot.command(aliases=['vol'])
async def volume(ctx, volume: int = None):
    """ Changes the player's volume (0-1000). """
    player = bot.lavalink.players.get(ctx.guild.id)

    if not volume:
        return await ctx.send(f'🔈 | {player.volume}%')

    await player.set_volume(volume)  # Lavalink will automatically cap values between, or equal to 0-1000.
    await ctx.send(f'🔈 | Set to {player.volume}%')

@bot.command()
async def shuffle(ctx):
    """ Shuffles the player's queue. """
    player = bot.lavalink.players.get(ctx.guild.id)
    if not player.is_playing:
        return await ctx.send('Nothing playing.')

    player.shuffle = not player.shuffle
    await ctx.send('🔀 | Shuffle ' + ('enabled' if player.shuffle else 'disabled'))

@bot.command(aliases=['loop'])
async def repeat(ctx):
    """ Repeats the current song until the command is invoked again. """
    player = bot.lavalink.players.get(ctx.guild.id)

    if not player.is_playing:
        return await ctx.send('Nothing playing.')

    player.repeat = not player.repeat
    await ctx.send('🔁 | Repeat ' + ('enabled' if player.repeat else 'disabled'))

@bot.command()
async def remove(ctx, index: int):
    """ Removes an item from the player's queue with the given index. """
    player = bot.lavalink.players.get(ctx.guild.id)

    if not player.queue:
        return await ctx.send('Nothing queued.')

    if index > len(player.queue) or index < 1:
        return await ctx.send(f'Index has to be **between** 1 and {len(player.queue)}')

    removed = player.queue.pop(index - 1)  # Account for 0-index.

    await ctx.send(f'Removed **{removed.title}** from the queue.')

@bot.command()
async def find(ctx, *, query):
    """ Lists the first 10 search results from a given query. """
    player = bot.lavalink.players.get(ctx.guild.id)

    if not query.startswith('ytsearch:') and not query.startswith('scsearch:'):
        query = 'ytsearch:' + query

    results = await player.node.get_tracks(query)

    if not results or not results['tracks']:
        return await ctx.send('Nothing found.')

    tracks = results['tracks'][:10]  # First 10 results

    o = ''
    for index, track in enumerate(tracks, start=1):
        track_title = track['info']['title']
        track_uri = track['info']['uri']
        o += f'`{index}.` [{track_title}]({track_uri})\n'

    embed = discord.Embed(color=discord.Color.blurple(), description=o)
    await ctx.send(embed=embed)

@bot.command(aliases=['dc'])
async def disconnect(ctx):
    """ Disconnects the player from the voice channel and clears its queue. """
    player = bot.lavalink.players.get(ctx.guild.id)

    if not player.is_connected:
        return await ctx.send('Not connected.')

    if not ctx.author.voice or (player.is_connected and ctx.author.voice.channel.id != int(player.channel_id)):
        return await ctx.send('You\'re not in my voicechannel!')

    player.queue.clear()
    await player.stop()
    await connect_to(ctx.guild.id, None)
    await ctx.send('*⃣ | Disconnected.')

async def ensure_voice(ctx):
    """ This check ensures that the bot and command author are in the same voicechannel. """
    player = bot.lavalink.players.create(ctx.guild.id, endpoint=str(ctx.guild.region))
    # Create returns a player if one exists, otherwise creates.

    should_connect = ctx.command.name in ('play')  # Add commands that require joining voice to work.

    if not ctx.author.voice or not ctx.author.voice.channel:
        raise commands.CommandInvokeError('Join a voicechannel first.')

    if not player.is_connected:
        if not should_connect:
            raise commands.CommandInvokeError('Not connected.')

        permissions = ctx.author.voice.channel.permissions_for(ctx.me)

        if not permissions.connect or not permissions.speak:  # Check user limit too?
            raise commands.CommandInvokeError('I need the `CONNECT` and `SPEAK` permissions.')

        player.store('channel', ctx.channel.id)
        await connect_to(ctx.guild.id, str(ctx.author.voice.channel.id))
    else:
        if int(player.channel_id) != ctx.author.voice.channel.id:
            raise commands.CommandInvokeError('You need to be in my voicechannel.')

# Finally add your token number and run the client
bot.run("Discord Auth Token Here!")

